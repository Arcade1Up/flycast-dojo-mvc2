#pragma once
#ifndef CONFIG_ICC_
#define CONFIG_ICC_

namespace sen {
auto Configs::initialize() -> void {
  options_ = std::make_unique<cxxopts::Options>("flycast", "a dreamcast emulator");
  options_->add_options()("config-dir", "emulator configuration directory", cxxopts::value<std::string>())("data-dir", "emulator data directory", cxxopts::value<std::string>())("game-dir", "Game iso ROM path", cxxopts::value<std::string>());
  options_->add_options("sound")("use-low-pass", "whether to use subwoofer for game audio", cxxopts::value<bool>()->default_value("false"))("volume", "emulator audio volume", cxxopts::value<int>()->default_value("100"))("backend", "emulator audio sdk", cxxopts::value<std::string>()->default_value("Oboe"));
  options_->add_options()("player", "emulator netvs player num", cxxopts::value<int>()->default_value("0"));
  options_->add_options()("difficulty", "game difficulty", cxxopts::value<int>()->default_value("2"));
  options_->add_options()("damage-level", "game damage level", cxxopts::value<int>()->default_value("2"));
  options_->add_options()("timer-speed", "game timer speed", cxxopts::value<int>()->default_value("2"));
  options_->add_options()("game-speed", "game speed", cxxopts::value<int>()->default_value("1"));
  options_->add_options()("demo-sound-half", "game demo sound", cxxopts::value<int>()->default_value("1"));
  options_->add_options()("freeplay", "game freeplay mode", cxxopts::value<bool>()->default_value("true"));
  options_->add_options()("config-changed", "game dip change", cxxopts::value<bool>()->default_value("false"));
  options_->add_options()("base-delay", "base delay frame counter", cxxopts::value<int>()->default_value("3"));
  options_->add_options()("game-id", "game id", cxxopts::value<int>());
  options_->add_options()("room-id", "room id", cxxopts::value<int>());
  options_->add_options()("user-id", "user id", cxxopts::value<int>());
  options_->add_options()("room-ip", "room server ip", cxxopts::value<std::string>());
  options_->add_options()("room-index", "room server index", cxxopts::value<int>());
  options_->add_options()("watch-server-ip", "watch server ip", cxxopts::value<std::string>());
  options_->add_options()("watch-args", "watch arguments", cxxopts::value<int>());
}
auto Configs::parseArgs(int argc, char **argv) -> void {
  try {
    parse_result_ = options_->parse(argc, argv);
    for (auto &arg : parse_result_.arguments()) {
      ZGS_LOG("%s:%s", arg.key().c_str(), arg.value().c_str());
    }

    game_dip_changed = parse_result_["config-changed"].as<bool>();
  } catch (const std::exception &exception) {
    ZGS_LOG("%s", exception.what());
    throw exception;
  }
}
auto Configs::terminate() -> void {
  options_.reset();
}

Configs configs;
bool game_dip_changed{false};
}// namespace sen

#endif//CONFIG_ICC_
